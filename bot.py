import asyncio
import os
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ .env
load_dotenv()
API_TOKEN = os.getenv("BOT_TOKEN")

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
class Form(StatesGroup):
    role = State()
    name = State()
    phone = State()
    residence = State()
    participation = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
role_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–Ø –∏—â—É")],
        [KeyboardButton(text="–Ø —Ö–æ—á—É –ø–æ–º–æ—á—å –Ω–∞–π—Ç–∏")]
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)

# /start
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –¢–µ–±–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å –∏–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–º–æ—á—å?", reply_markup=role_kb)
    await state.set_state(Form.role)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–æ–ª–∏
async def role_chosen(message: Message, state: FSMContext):
    if message.text not in ["–Ø –∏—â—É", "–Ø —Ö–æ—á—É –ø–æ–º–æ—á—å –Ω–∞–π—Ç–∏"]:
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.")
    await state.update_data(role=message.text)
    await message.answer("–ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –∏–º—è", reply_markup=ReplyKeyboardRemove())
    await state.set_state(Form.name)
    # if message.text == "üë¶ –ú–∞–ª—å—á–∏–∫":
    #     await state.set_state(Form.name)
    # else:
    #     await state.set_state(Form.second_name)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏
async def name_chosen(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω")
    await state.set_state(Form.phone)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
async def phone_chosen(message: Message, state: FSMContext):
    await state.update_data(phone=message.text)
        
    data = await state.get_data()
    if data['role'] == '–Ø –∏—â—É':
        await message.answer("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –∞–¥—Ä–µ—Å")
        await state.set_state(Form.residence)
    else:
        await message.answer("–¢—ã —É–∂–µ –º–æ–∂–µ—à—å —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å? –¥–∞/–Ω–µ—Ç")
        await state.set_state(Form.participation)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞
async def residence_chosen(message: Message, state: FSMContext):
    await state.update_data(residence=message.text)
    data = await state.get_data()
    await message.answer(f"–¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ {data}")
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—á–∞—Å—Ç–∏—è
async def participation_chosen(message: Message, state: FSMContext):
    await state.update_data(participation=message.text)
    data = await state.get_data()
    await message.answer(f"–¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ {data}")
    await state.clear()


# /cancel
async def cancel_handler(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–û–∫–µ–π, –≤—Å—ë —Å–±—Ä–æ—Å–∏–ª. –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.", reply_markup=ReplyKeyboardRemove())

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher()

    dp.message.register(cmd_start, F.text == "/start")
    dp.message.register(cancel_handler, F.text == "/cancel")
    dp.message.register(role_chosen, Form.role)
    dp.message.register(name_chosen, Form.name)
    dp.message.register(phone_chosen, Form.phone)
    dp.message.register(residence_chosen, Form.residence)
    dp.message.register(participation_chosen, Form.participation)

    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
